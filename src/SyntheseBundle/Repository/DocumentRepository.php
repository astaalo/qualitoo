<?php
namespace App\SyntheseBundle\Repository;

use App\Controller\BaseController;
//use Doctrine\ODM\MongoDB\DocumentRepository as Repository;
use Doctrine\ODM\MongoDB\Repository\DocumentRepository as Repository;
use App\Entity\Utilisateur;
use App\Entity\Risque;
use App\Entity\Cartographie;

/**
 * EntityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DocumentRepository extends Repository
{

	/**
	 * @var array
	 */
	protected $_ids;
	
	/**
	 * @var array
	 */
	protected $_states;
	
	/**
	 * @var \App\Entity\Utilisateur
	 */
	protected $_user;
	
	public function setParameters($params = array('ids' => null, 'states' => null, 'user' => null)) {
		$this->_ids		= $params['ids'];
		$this->_states	= $params['states'];
		$this->_user	= $params['user'];
	}
	
	/**
	 * @param \App\Entity\Risque $criteria
	 * @return \Doctrine\ORM\QueryBuilder
	 */
	public function filterBuilder($queryBuilder, $criteria) {
		$criteria = $criteria ? $criteria : new \App\Entity\Risque();
		/*if(empty($criteria->motCle)==false) {
		 $query  = 'm.libelle LIKE :motCle OR cs.libelle LIKE :motCle OR ';
		 $query .= 'pas.libelle LIKE :motCle OR ';
		 $query .= 'pm.libelle LIKE :motCle OR pp.libelle LIKE :motCle OR ';
		 $query .= 'ctrl.description LIKE :motCle OR pas.description LIKE :motCle';
		 $queryBuilder->andWhere($query)->setParameter('motCle', '%'.$criteria->motCle.'%');
		 }*/
		if($criteria->getMenace()) {
			$queryBuilder->field('menace.id')->equals($criteria->getMenace()->getId());
		}
		$queryBuilder->field('societe')->equals($this->_user->getSociete()->getId());
		if($criteria->getCartographie()) {
			$queryBuilder->field('cartographie')->equals($criteria->getCartographie()->getId());
		}
		$data = $criteria->getRisqueData();
		if($data==null) {
		} elseif($criteria->isPhysical()) {
			if($data->getSite()) {
				$queryBuilder->field('site.id')->equals($data->getSite()->getId());
			}
			if($data->getEquipement()) {
				$queryBuilder->field('equipement.id')->equals($data->getEquipement()->getId());
			}
		} else {
			if($data->getDirection()) {
				$queryBuilder->field('direction.id')->equals($data->getDirection()->getId());
			}
			if($data->getStructure()) {
				$queryBuilder->field('structure.id')->in($data->getStructure()->getChildrenIds());
			}
			if(null!=$processus = $data->getProcessus()) {
				$queryBuilder->addAnd(
						$queryBuilder->expr()
							->addOr($queryBuilder->expr()->field('processus.normal.id')->in($processus->getChildrenIds()))
							->addOr($queryBuilder->expr()->field('processus.sous.id')->in($processus->getChildrenIds()))
					);
			}
			if($criteria->getCartographie()->getId()==Risque::$carto['metier'] && $data->getActivite()) {
				$queryBuilder->field('activite.id')->equals($data->getActivite()->getId());
			} elseif($criteria->getCartographie()->getId()==Risque::$carto['projet'] && $data->getProjet()) {
				$queryBuilder->field('projet.id')->equals($data->getProjet()->getId());
			}
		}
		/*if($criteria->cause) {
		 $queryBuilder->andWhere('cor.cause = :cause')->setParameter('cause', $criteria->cause);
		 }*/
		if($criteria->getCriticite() && $criteria->getCriticite()->count()) {
			$queryBuilder->field('criticite')->in($criteria->getCriticite());
		}
		if($criteria->getProbabilite() && count($criteria->getProbabilite())) {
			$queryBuilder->field('probabilite')->in(array_values($criteria->getProbabilite()));
		}
		if($criteria->getGravite() && count($criteria->getGravite())) {
			$queryBuilder->field('gravite')->in(array_values($criteria->getGravite()));
		}
		/*if(empty($criteria->hasPlanAction)==false) {
		 if($criteria->hasPlanAction==true) {
		 $queryBuilder->andWhere('pas.id is not null');
		 if($criteria->statutPlanAction) {
		 $queryBuilder->andWhere('pas.statut = :statutPA')->setParameter('statutPA', $criteria->statutPlanAction);
		 }
		 } elseif($criteria->hasPlanAction==false) {
		 $queryBuilder->andWhere('pas.id is null');
		 }
		 }
		 if(empty($criteria->hasControle)==false) {
		 if($criteria->hasControle==true) {
		 $queryBuilder->andWhere('ctrl.id is not null');
		 } elseif($criteria->hasControle==false) {
		 $queryBuilder->andWhere('ctrl.id is null');
		 }
		 }*/
		return $queryBuilder;
	}
	
	/**
	 * @param \App\Entity\Risque $criteria
	 */
	public function applyFilterByProfile($queryBuilder, $criteria)
	{
        $this->_user = BaseController::$_user;
		if($this->_user->hasRole(Utilisateur::ROLE_SUPER_ADMIN)) {
		} elseif($this->_user->hasRole(Utilisateur::ROLE_ADMIN)) {
			$queryBuilder->field('societe')->equals($this->_user->getSociete()->getId());
		} elseif( $this->_user->hasRole(Utilisateur::ROLE_RISKMANAGER)) {
			$queryBuilder->field('societe')->equals($this->_user->getSociete()->getId());
		} elseif($this->_user->hasRole(Utilisateur::ROLE_AUDITEUR)) {
			$queryBuilder->field('societe')->equals($this->_user->getSociete()->getId());
		} elseif( $this->_user->hasRole(Utilisateur::ROLE_RESPONSABLE) && $criteria->getCartographie() && $criteria->isPhysical()==false ) {
			if((null!=$structure=$this->_user->getStructure()) && $this->_user->isManager()) {
				$queryBuilder->field('structure.id')->in($structure->getChildrenIds());
			}
		} elseif($this->_user->hasRole(Utilisateur::ROLE_CHEFPROJET) && $criteria->getCartographie()->getId()==Cartographie::$ids['projet']) {
			$queryBuilder->field('projet.id')->in($this->_user->getProjetIds());
		} elseif(($this->_user->hasRole(Utilisateur::ROLE_PORTEUR) || $this->_user->hasRole(Utilisateur::ROLE_SUPERVISEUR)) && $criteria->isPhysical()==false) {
			if($this->_user->hasStructureOfConsulteur()) {
				$consultions=$this->_user->getStructureOfConsulteur();
				$structure=$this->_user->getStructure();
				if( null != $structure && null != $consultions) {
					$IDs = $structure->getChildrenIds();
					foreach ($consultions as $st) { $IDs = array_merge($IDs, $st->getChildrenIds()); }
					$queryBuilder->field('structure.id')->in($IDs)->addOr($queryBuilder->expr()->field('structure')->exists(false));
				}
			} else {
				if(null != $structure=$this->_user->getStructure()) {
					$queryBuilder->field('structure.id')->in($structure->getChildrenIds())->addOr($queryBuilder->expr()->field('structure')->exists(false));
				}
			}
		}
		return $queryBuilder;
	}
	
}
