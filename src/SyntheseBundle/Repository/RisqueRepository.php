<?php
namespace App\SyntheseBundle\Repository;

use App\Entity\Utilisateur;
use App\Entity\Risque;

/**
 * RisqueRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RisqueRepository extends DocumentRepository
{

	/**
	 * @param Risque $criteria
	 * @param integer $type
	 * @return array
	 */
	public function getMatrice($criteria, $type, &$probaKPIs, &$graviteKPIs) {
		ini_set('mongo.long_as_object', true);
		$graviteKPIs = false;
		if($type==0 && $criteria->isPhysical()==false) {
			$probaKPIs = $this->getMaturiteProbabiliteByRisqueStructure($criteria, 0)->getQuery()->execute()->toArray();
			$graviteKPIs = $this->getGraviteByRisqueStructure($criteria, 0)->execute();
		} elseif($type==1 && $criteria->isPhysical()==false) {
			$probaKPIs = $this->getMaturiteProbabiliteByRisqueStructure($criteria, 1)->getQuery()->execute()->toArray();
			$graviteKPIs = $this->getGraviteByRisqueStructure($criteria, 1)->execute();
		} elseif($type==1 && $criteria->isPhysical()==true) {
			$probaKPIs  = $this->getMaturiteProbabiliteBySite($criteria)->getQuery()->execute()->toArray();
			$graviteKPIs= $this->getGraviteByRisqueSite($criteria)->execute()->toArray();
		} elseif($type==2 || $type==3) {
			$probaKPIs = $this->getMaturiteGraviteByType($criteria, $type)->getQuery()->execute();
		} elseif($type==4) {
			$probaKPIs = $this->getMaturiteGraviteProbabilteByRisque($criteria)->getQuery()->execute();
		} else {
			$qb = $this->createQueryBuilder('r')
			    ->select('r.id, m.libelle, r.gravite, r.probabilite, 1 as nbRisk, (r.probabilite * r.gravite) as criticite');
			$this->applyFilterByProfile($qb, $criteria);
			$probaKPIs = $this->filterBuilder($qb, $criteria)
				->getQuery()->getArrayResult();
		}
	}
	
	/* requetes destinees pour les KPIs */
	/**
	 * @param Risque $criteria
	 */
	public function getGraviteByRisqueStructure($criteria, $lvl) {
		$criteria = $criteria ? $criteria : new Risque();
		$queryBuilder = $this->createAggregationBuilder('q');
		$this->applyFilterByProfile($queryBuilder->match(), $criteria);
		$this->filterBuilder($queryBuilder->match(), $criteria);
		$queryBuilder->unWind('$impacts')->group()
			->field('id')->expression(
				$queryBuilder->expr()
					->field('menace')->expression('$menace.libelle')
					->field('structure')->expression($lvl==0 ? '$direction' : '$structure')
					->field('direction')->expression('$direction')
					->field('domaine')->expression('$impacts.libelle')
					->field('gravite')->avg('$impacts.gravite')
				)
			->project()
				->field('menace')->expression('$_id.menace')
				->field('gravite')->avg('$_id.gravite')
				->field('domaine')->expression('$_id.domaine')
				->field('direction')->expression('$_id.direction.libelle')
				->field('libelle')->expression('$_id.structure.name')
				->field('code')->expression('$_id.structure.code')
				->field('sId')->avg('$_id.structure.id')
				->excludeFields(['id']);
		return $queryBuilder;
	}	
	
	
	/**
	 * @param Risque $criteria
	 */
	public function getMaturiteProbabiliteByRisqueStructure($criteria,$lvl) {
		ini_set('mongo.long_as_object', true);
		$criteria = $criteria ? $criteria : new Risque();
		$queryBuilder = $this->createQueryBuilder('q');
		$initial = array('count' => array('p'=>0, 'm'=>0), 'total_probabilite'=>0, 'total_maturite'=>0);
		$key = 'function(value) { return { id: _TAG_.id, name: _TAG_.name, libelle: _TAG_.name, direction: value.direction.libelle } }';
		$key = $lvl==0 ? str_replace('_TAG_', 'value.direction', $key) : str_replace('_TAG_', 'value.structure', $key);
		$queryBuilder->group($key, $initial, 'reduceMPRS', array('finalize'=>'finalizeMPRS'));
		$this->applyFilterByProfile($queryBuilder, $criteria);
		$queryBuilder = $this->filterBuilder($queryBuilder, $criteria);
		if(count($criteria->maturiteForKpi)>0) {
			$valeurs_maturite_criteria = array();
			foreach ($criteria->maturiteForKpi as $key =>$value) {
				$valeurs_maturite_criteria [] = intval($value->getValeur());
			}
			$queryBuilder->field('maturite')->equals($valeurs_maturite_criteria);
		}
		return $queryBuilder;
	}
	
	/**
	 * @param Risque $criteria
	 */
	public function getGraviteByRisqueSite($criteria){
		$criteria = $criteria ? $criteria : new Risque();
		$queryBuilder = $this->createAggregationBuilder('r');
		$this->applyFilterByProfile($queryBuilder->match(), $criteria);
		$this->filterBuilder($queryBuilder->match(), $criteria);
		$queryBuilder->unWind('$impacts')->group()
			->field('id')->expression(
				$queryBuilder->expr()
					->field('site')->expression('$site')
					->field('menace')->expression('$menace.libelle')
					->field('domaine')->expression('$impacts')
					->field('gravite')->expression('$impacts.gravite')
					)->project()
				->field('sId')->avg('$_id.site.id')
				->field('libelle')->expression('$_id.site.libelle')
				->field('domaine')->expression('$_id.domaine.libelle')
				->field('menace')->expression('$_id.menace')
				->field('gravite')->avg('$_id.gravite')
				->excludeFields(['_id']);
		return $queryBuilder;
	}
	
	/**
	 * @param Risque $criteria
	 */
	public function getMaturiteProbabiliteBySite($criteria) {
		ini_set('mongo.long_as_object', true);
		$criteria = $criteria ? $criteria : new Risque();
		$queryBuilder=$this->createQueryBuilder('r');
		$this->applyFilterByProfile($queryBuilder, $criteria);
		$this->filterBuilder($queryBuilder, $criteria);
		$keyf = 'function(value) { return { id: value.site.id, libelle: value.site.libelle } }';
		$queryBuilder->group($keyf, array('nbrisk' => 0, 'total_probabilite' => 0, 'maturite' => 0), 'reduceMPS', array('finalize' => 'finalizeMPS'));
    	if(count($criteria->maturiteForKpi)>0) {
    		$valeurs_maturite_criteria = array();
    		foreach ($criteria->maturiteForKpi as $key =>$value) {
    			$valeurs_maturite_criteria [] = intval($value->getValeur());
    		}
    		$queryBuilder->field('maturite')->equals($valeurs_maturite_criteria);
    	}
		return $queryBuilder;
			
	}

	/**
	 * @param Risque $criteria
	 * @param integer $type
	 */
	public function getMaturiteGraviteByType($criteria, $type) {
		$criteria = $criteria ? $criteria : new Risque();
		$carto = $criteria->getCartographie()->getId();
		$queryBuilder = $this ->createQueryBuilder('r');
		$this->applyFilterByProfile($queryBuilder, $criteria);
		$this->filterBuilder($queryBuilder, $criteria);
		$initial = array('count' => array('p'=>0, 'g'=>0, 'm'=>0), 'total_probabilite'=>0, 'total_gravite'=>0, 'total_maturite'=>0);
		if($type==2 && $carto==1) {
			$key = 'activite';
		} elseif ($type==2 && $carto==2) {
			$key = 'projet';
		} elseif($type==3 && in_array($carto, array(3, 4))) {
			$key = 'equipement';
		}
		$keyf = 'function(value) { return { id: value.'.$key.'.id, libelle: value.'.$key.'.libelle} }';
		$queryBuilder->group($keyf, $initial, 'reduceMGT', array('finalize'=>'finalizeMGT'));
		if(count($criteria->maturiteForKpi)>0) {
			$valeurs_maturite_criteria = array();
			foreach ($criteria->maturiteForKpi as $key =>$value) {
				$valeurs_maturite_criteria [] = intval($value->getValeur());
			}
			$queryBuilder->field('maturite')->in($valeurs_maturite_criteria);
		}
		if(count($criteria->criticiteForKpi)>0){
			$valeurs_criticite_criteria = array();
			foreach ($criteria->criticiteForKpi as $key =>$value) {
				for ($i=$value->getVmin(); $i<=$value->getVmax();$i++) {
					$valeurs_criticite_criteria [] = $i;
				}
			}
			$queryBuilder->field('criticite')->in($valeurs_criticite_criteria);
		}
		return $queryBuilder;
	}
	
	/**
	 *
	 * @param Risque $criteria
	 */
	public function getMaturiteGraviteProbabilteByRisque($criteria) {
		$criteria = $criteria ? $criteria : new Risque();
		$queryBuilder = $this->createQueryBuilder('Risque')->hydrate(false);
		$this->applyFilterByProfile($queryBuilder, $criteria);
		$this->filterBuilder($queryBuilder, $criteria);
		$initial = array('count'=>0, 'max_probabilite'=>0, 'total_probabilite'=>0, 'total_gravite'=>0, 'gravite'=>0, 'criticite'=>0, 'maturite'=>0);
		$queryBuilder->group('function(value) { return { cle: value.menace} }', $initial, 'reduceRRC', array('finalize' => 'finalizeRRC'));
		if(count($criteria->maturiteForKpi)>0){
			$valeurs_maturite_criteria = array();
			foreach ($criteria->maturiteForKpi as $value) {
				$valeurs_maturite_criteria [] = intval($value->getValeur());
			}
			$queryBuilder->field('maturite')->in($valeurs_maturite_criteria);
		}
		if(count($criteria->criticiteForKpi)>0) {
			$valeurs_criticite_criteria = array();
			foreach ($criteria->criticiteForKpi as $value) {
				for ($i=$value->getVmin(); $i<=$value->getVmax();$i++) {
					$valeurs_criticite_criteria [] = $i;
				}
			}
			$queryBuilder->field('criticite')->in($valeurs_criticite_criteria);
		}
		if(count($criteria->graviteForKpi)>0) {
			$queryBuilder->field('gravite')->in($criteria->graviteForKpi);
		}
		if(count($criteria->probaForKpi)>0) {
			$queryBuilder->field('probabilite')->in($criteria->probaForKpi);
		}
		return $queryBuilder;
	}
	
	/**
	 * @param Risque $criteria
	 */
	public function risqueTransverses($criteria){
		$criteria = $criteria ? $criteria : new Risque();
		$carto=$criteria->getCartographie()->getId();
		$this->applyFilterByProfile($queryBuilder, $criteria);
		$queryBuilder =  $this->filterBuilder($queryBuilder, $criteria)
			->group()->field('id')->expression('$menace.id')->field('libelle')->expression('$menace.libelle')->field('occurence')->sum(1)
			->match()->field('occurence')->gt(1);
		return $queryBuilder;
	}
	
	/**
	 * @param Risque $criteria
	 */
	public function getMenacesTotalByYear($criteria){
		$criteria = $criteria ? $criteria : new Risque();
		$queryBuilder=$this ->createQueryBuilder('r')
					->select ('count(m.id) nombre, YEAR(r.dateSaisie) annee');
		$this->applyFilterByProfile($queryBuilder, $criteria);
		$queryBuilder = $this->filterBuilder($queryBuilder, $criteria);
		return $queryBuilder->groupBy('annee');
	}
	
}
