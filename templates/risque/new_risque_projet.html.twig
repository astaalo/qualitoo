{% extends 'configuration/index.html.twig' %}

{% block menu_config %}
{% endblock %}

{% block header_config %}
<div class="header">
	<span>
		<span class="ico color add"></span>Identification de risque projet
	</span>
	<div id="buttom_top">
		<ul class="uibutton-group">
			<li><a class="uibutton icon answer" href="{{ path('les_risques') }}">Liste des risques</a></li>
        </ul>
    </div>
</div>
{% endblock %}

{% block content_config %}
	<div class="contentForm">
		<form  novalidate="novalidate"  action="{{ entity.id is empty ? path('ajout_risque', { 'cartographie_id': cartographie_id}) : path('edition_risque', {'id': id}) }}" method="POST">
			{% set structureCodeAfter %}
				<label class="other_label"><input class="other" target-id="{{ form.risque.identification.structure.vars.id }}" type="checkbox" />Saisir la structure</label>
				{{ form_widget(form.risque.identification.structure, {'show': false}) }}
			{% endset %}
			
			{% set processusCodeAfter %}
				{{ form_widget(form.risque.identification.processus, {'show': false}) }}
			{% endset %}
			
			{% set projetCodeAfter %}
				<label class="other_label"><input id="projet_checkbox" class="other" target-id="{{ form.risque.identification.projet.vars.id }}" type="checkbox" />Saisir le nom du projet</label>
				{{ form_widget(form.risque.identification.projet, {'show': false}) }}
			{% endset %}
			
			{% set menaceCodeAfter %}
				<label class="other_label"><input id="risque_checkbox" class="other" target-id="{{ form.risque.identification.libelle.vars.id }}" type="checkbox" />Saisir le nom du risque</label>
				{{ form_widget(form.risque.identification.libelle, {'show': false}) }}
			{% endset %}
			
			{% set responsableCodeBefore %}
				Responsable de la structure choisie : {{ form_widget(form.proprietaire) }}
				<br><br>
			{% endset %}
			
			{% set causeSheepItTemplate %}
				{% include 'extra/sheepIt_template.html.twig' with
					{
						'id': form.risque.causeOfRisque.vars.id,
						'prototype' : form.risque.causeOfRisque.vars.prototype, 
						'prototypeTemplate' : 'risque/risque_cause_prototype.html.twig',
						'addText': 'Ajouter une cause', 
						'removeAllText': 'Supprimer toutes les causes',
						'noFormText': 'Aucune cause n\'est encore identifiée !',
					}
				%}
			{% endset %}
			
			{% set causeDataForm= '' %}
			{% for causeForm in form.risque.causeOfRisque %}
				{% set row %}
				{
				    {% if causeForm.vars.value.cause is empty %}
				        {{ '"%s": ""'|format(causeForm.cause.vars.name)|raw }},
				    {% elseif causeForm.vars.value.cause.etat==true %}
					    {{ '"%s": "%s"'|format(causeForm.cause.vars.name, causeForm.cause.vars.value)|raw }},
					{% else %}
					    {{ '"%s": "%s"'|format(causeForm.newCause.libelle.vars.name, causeForm.newCause.libelle.vars.value)|raw }},
					{% endif %}
				},
				{% endset %}
				{% set causeDataForm = causeDataForm ~ row %}
			{% endfor %}
			
			{% set causeDataForm = '[%s]'|format(causeDataForm|raw) %}
			<div {% if has_rights ('ROLE_RESPONSABLE_ONLY') %} style="display:none "{% endif %}>
					{{ form_row(form.direction) }}	
				 	{{ form_row(form.structure, {'code_after' : structureCodeAfter}) }}
					{{ form_row(form.risque.identification.responsable, {'code_before' : responsableCodeBefore, 'show': false}) }}
			
			</div>
					{{ form_row(form.processus, {'code_after' : processusCodeAfter}) }}
					{{ form_row(form.projet, {'code_after' : projetCodeAfter }) }}
					{{ form_row(form.risque.menace, {'code_after' : menaceCodeAfter }) }}
			  		{{ form_row(form.risque.causeOfRisque, {'sheeptIt_template' : causeSheepItTemplate }) }}
					{{ form_row(form._token) }}
			<!-- /Form content -->
			<div class="section last footer">
				<div>
					<button id="save" class="uibutton loading" >Enregistrer</button>
					<a class="uibutton special" onClick="ResetForm()" title="Effacer">Effacer</a>
				</div>
			</div>
		</form>
	</div>

{% block add_script_js %}
	<script type="text/javascript">
		$( "#accordion" ).accordion({
			heightStyle: "fill",
			icons: { "header": "ui-icon-plus", "activeHeader": "ui-icon-minus" },
			beforeActivate: function( event, ui ) {
				/*if($(ui.newHeader.context).hasClass('last')) {
					$('#save').removeClass('disable').prop('disabled', false);
				} else {
					$('#save').addClass('disable').prop('disabled', true);
				}*/
			}
		});

		$(function() {
			$nouvelle_cause=$( ".risque_cause_row .section:eq(2)" );
			$nouvelle_cause.hide();
		$('input[type="checkbox"].choix').live('change', function(e) {
				$('input[type="checkbox"].choix').each(function() {
					$nouvelle_cause=$(this).parent().parent().parent().children('.section:last');
					if($(this).prop( "checked" )) {
						$nouvelle_cause.show( );
					}else{
						$nouvelle_cause.hide( );
					}
				});
		});
		});
		// code to execute after Select ajax load
		
		function afterDirectionReload() {
			$("#{{ form.structure.vars.id }} option[value='{{ form.structure.vars.value }}']").attr('selected', 'selected');
			$("#{{ form.structure.vars.id }}").trigger('liszt:updated');
		}

		function afterStructureReload() {
			$("#{{ form.processus.vars.id }} option[value='{{ form.processus.vars.value }}']").attr('selected', 'selected');
			$("#{{ form.processus.vars.id }}").trigger('liszt:updated');
		}

		function afterProcessusReload() {
			$("#{{ form.projet.vars.id }} option[value='{{ form.projet.vars.value }}']").attr('selected', 'selected');
			$("#{{ form.projet.vars.id }}").trigger('liszt:updated');
		}
		

		$('label input[type="checkbox"].other').each(function(index) {
			var target = $('#' + $(this).attr('target-id'));
			$(this).prop('checked', target.val().length !== 0 ? 'checked' : null);
			if(target.val().length !== 0) {
				target.parent().show();
			}
		});
		
		$('label input[type="checkbox"].other').on('change', function(e) {
			var target = $('#' + $(this).attr('target-id'));
			toggle(target.closest('div'), this.checked);
			if(!this.checked) {
				target.val('')
			}
		});



		$('#projet_checkbox').click(function (){
			$("#{{ form.projet.vars.id }} option[value='']").attr('selected', 'selected');
			$("#{{ form.projet.vars.id }}").trigger('liszt:updated');
		})
		$('#risque_checkbox').click(function (){
			$("#{{ form.risque.menace.vars.id }} option[value='']").attr('selected', 'selected');
			$("#{{ form.risque.menace.vars.id }}").trigger('liszt:updated');
		})
	</script>
	
{% endblock %}

	<script>
		$('#{{ form.projet.vars.id }}').prepend("<option value>Choisir un projet ...</option>");
		{% if form.projet.vars.value is empty %}
			$('#{{ form.projet.vars.id }}').val(''); // if you want it to be automatically selected
		{% endif %}

		$('#{{ form.risque.menace.vars.id }}').prepend("<option value>Choisir un risque ...</option>");
		{% if form.risque.menace.vars.value is empty %}
			$('#{{ form.risque.menace.vars.id }}').val(''); // if you want it to be automatically selected
		{% endif %}
	</script>

{% set codeAfterResponsableUpdate %}
		var show = false;
		if(result == 'Aucun') {
			show = true;
		}
		var obj = $('#{{ form.risque.identification.responsable.vars.id }}').closest('div');
		toggle(obj, show);
{% endset %}
{% if form.direction.vars.value is empty %}
{% include 'extra/reloadSelect.html.twig' with 
	{parent: form.direction, child: form.structure, url: path('structure_by_parent'), key: 'id', empty_child: 1, functionAfter: 'afterDirectionReload'} 
%}
{% endif %}
{% include 'extra/reloadSelect.html.twig' with
	{parent: form.structure, child: form.processus, url: path('get_processus_by_structure'), key: 'id', empty_child: 1, functionAfter: 'afterStructureReload'}
%}

{% include 'extra/reloadSelect.html.twig' with
	{parent: form.processus, child: form.projet, url: path('get_projet_by_processus'), key: 'id', empty_child: 1, functionAfter: 'afterProcessusReload'}
%}

{% include 'extra/updateField.html.twig' with 
	{parent: form.structure, fieldId: 'responsable', url: path('get_responsable_by_structure'), key: 'id', empty_child: 0, codeAfter: codeAfterResponsableUpdate} 
%}

{% include 'extra/sheepit.html.twig' with {
				with_script: true,
				content: '#' ~ form.risque.causeOfRisque.vars.id, 
				options: '{' ~
					'iniFormsCount: 1, 
					 minFormsCount: 0, 
					 maxFormsCount: 100, 
					 indexFormat: "__name__", 
					 data: ' ~ causeDataForm ~ ', 
					 separator: "", 
					 allowRemoveAll: true, ' ~ 
					 'afterAdd: function(source, addForm ,causeDataForm) {    },' ~
					 'afterFill: function(source, addForm, value) { refreshChosen($(addForm).find(".cl_cause"), value.cause); }, ' ~
					 'removeAllConfirmationMsg: "Vous êtes sur le point de supprimer toutes les causes liées à ce risque. Voulez vous vraiment continuer ?", ' ~
					 'afterRemoveCurrent: function(source) {  } ' ~
					 '}', 
				embeddedForm: form.risque.causeOfRisque, 
				error_fields: {0 :'cause', 'newCause': { 0:'libelle' }} 
			}
 %}

	{% include 'risque/checkDoublonsRiskProjet.html.twig' %}
{% endblock %}
